# -*- mode: snippet -*-
# name: pattern
# key: patt
# --

use crate::controller::{Controller, LedController};
use crate::error::Result;
use crate::patterns::RunnablePattern;

#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone)]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]

pub struct ${1:name} {
    pub tick_rate: u64,
}

impl ${1:name} {
    pub fn new(tick_rate: u64) -> ${1:name} {
        ${1:name} { tick_rate }
    }
}

impl RunnablePattern for ${1:name} {
    fn tick_rate(&self) -> u64 {
        self.tick_rate
    }

    fn tick_cycle(&self) -> Option<u64> {

    }

    fn tick(&mut self, tick: u64, controller: &mut Controller) -> Result<()> {

    }
}